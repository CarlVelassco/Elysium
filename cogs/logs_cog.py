import discord
from discord.ext import commands
from discord import app_commands, ui
import json
import io
from datetime import datetime, timedelta, timezone
import re
from collections import defaultdict

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ ---

class ParsedEvent:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–≤–µ–Ω—Ç–µ."""
    def __init__(self, start_time, end_time, user_id, nickname, points, event_name, category):
        self.start_time = start_time
        self.end_time = end_time
        self.user_id = user_id
        self.nickname = nickname
        self.points = points
        self.event_name = event_name
        self.category = category
        self.night_bonus = 0
        self.night_multiplier_str = ""

def parse_date_range(date_str: str):
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–∞—Ç–æ–π –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –¥–∞—Ç. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (start_date, end_date)."""
    msk_tz = timezone(timedelta(hours=3))
    current_year = datetime.now().year

    if '-' in date_str:
        start_str, end_str = date_str.split('-')
        start_dt_naive = datetime.strptime(start_str, '%d.%m').replace(year=current_year, hour=0, minute=0, second=0)
        end_dt_naive = datetime.strptime(end_str, '%d.%m').replace(year=current_year, hour=0, minute=0, second=0) + timedelta(days=1)
    else:
        start_dt_naive = datetime.strptime(date_str, '%d.%m').replace(year=current_year, hour=0, minute=0, second=0)
        end_dt_naive = start_dt_naive + timedelta(days=1)

    start_date = start_dt_naive.replace(tzinfo=msk_tz)
    end_date = end_dt_naive.replace(tzinfo=msk_tz)

    return start_date, end_date

# --- UI –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /makser ---

class DateRangeModal(ui.Modal, title='–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç'):
    def __init__(self, category: str, bot, log_cog):
        super().__init__()
        self.category = category
        self.bot = bot
        self.log_cog = log_cog

    dates = ui.TextInput(
        label='–î–∞—Ç–∞ –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω (–î–î.–ú–ú –∏–ª–∏ –î–î.–ú–ú-–î–î.–ú–ú)',
        placeholder='–ù–∞–ø—Ä–∏–º–µ—Ä: 21.09 –∏–ª–∏ 21.09-22.09',
        required=True,
    )

    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True, thinking=True)
        try:
            start_date, end_date = parse_date_range(self.dates.value)
        except ValueError:
            await interaction.followup.send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.", ephemeral=True)
            return

        all_events = await self.log_cog.parse_channel_history(start_date, end_date)
        if all_events is None:
            await interaction.followup.send("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.", ephemeral=True)
            return
        
        # –î–ª—è /makser –º—ã –¥–æ–ª–∂–Ω—ã —É—á–∏—Ç—ã–≤–∞—Ç—å –Ω–æ—á–Ω—ã–µ –±–æ–Ω—É—Å—ã –≤ –ø–æ–¥—Å—á–µ—Ç–∞—Ö
        processed_events = self.log_cog.process_night_events(all_events)
        category_events = [event for event in processed_events if event.category.lower() == self.category.lower()]
        
        if not category_events:
            await interaction.followup.send(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ `{self.category}` –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–≤–µ–Ω—Ç–æ–≤.", ephemeral=True)
            return

        log_file = await self.log_cog.generate_summary_log_file(category_events, filename=f"summary_{self.category}_{self.dates.value}.txt")
        
        log_channel = self.bot.get_channel(self.bot.log_channel_id)
        if log_channel:
            await log_channel.send(f"üìä –°—É–º–º–∞—Ä–Ω—ã–π –ª–æ–≥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ `{self.category}` –∑–∞ {self.dates.value}", file=log_file)
            await interaction.followup.send(f"–°—É–º–º–∞—Ä–Ω—ã–π –ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {log_channel.mention}.", ephemeral=True)
        else:
            await interaction.followup.send("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤.", ephemeral=True)

class MakserView(ui.View):
    def __init__(self, bot, log_cog):
        super().__init__(timeout=None)
        self.bot = bot
        self.log_cog = log_cog
        with open('categories.json', 'r', encoding='utf-8') as f:
            categories = json.load(f)
        
        for category_name in categories:
            self.add_item(ui.Button(label=category_name, custom_id=f"makser_cat_{category_name}", style=discord.ButtonStyle.secondary))
        
        self.add_item(ui.Button(label="Other", custom_id="makser_cat_Other", style=discord.ButtonStyle.secondary))

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        if interaction.data and interaction.data.get("custom_id"):
            custom_id = interaction.data["custom_id"]
            if custom_id.startswith("makser_cat_"):
                category_name = custom_id.replace("makser_cat_", "")
                modal = DateRangeModal(category=category_name, bot=self.bot, log_cog=self.log_cog)
                await interaction.response.send_modal(modal)
                return False
        return True


# --- –û—Å–Ω–æ–≤–Ω–æ–π –ö–æ–≥ ---

class LogsCog(commands.Cog):
    """–ö–æ–≥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ–≤."""
    def __init__(self, bot):
        self.bot = bot
        self.msk_tz = timezone(timedelta(hours=3))

    def get_category_for_event(self, event_name):
        with open('categories.json', 'r', encoding='utf-8') as f:
            categories = json.load(f)
        for category, events in categories.items():
            if event_name in events:
                return category
        return "Other"

    async def parse_channel_history(self, after_date, before_date):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–∞—Ä—Å–∏—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–∞–Ω–∞–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ ParsedEvent."""
        channel = self.bot.get_channel(self.bot.parse_channel_id)
        if not channel: return None
        all_events = []
        async for message in channel.history(limit=None, after=after_date, before=before_date):
            if not message.embeds or message.embeds[0].title is None or message.embeds[0].title.strip() != "–û—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–º –∏–≤–µ–Ω—Ç–µ":
                continue
            try:
                embed = message.embeds[0]
                iventer_field = embed.description.split('\n')[0]
                user_id_match = re.search(r'<@!?(\d+)>', iventer_field)
                user_id = int(user_id_match.group(1)) if user_id_match else None
                nickname_match = re.search(r'<@!?\d+>\s+(.+)', iventer_field)
                nickname = nickname_match.group(1).strip().replace('`', '') if nickname_match else "–ù–µ –Ω–∞–π–¥–µ–Ω"
                if not user_id: continue
                points = 0
                event_name = "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                for field in embed.fields:
                    field_name_lower = field.name.lower().strip()
                    if "–ø–æ–ª—É—á–µ–Ω–æ" in field_name_lower:
                        points_match = re.search(r'\d+', field.value)
                        if points_match: points = int(points_match.group(0))
                    elif "–∏–≤–µ–Ω—Ç" in field_name_lower and "–≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏" not in field_name_lower:
                        event_name = field.value.strip().replace('`', '')
                if points == 0: continue
                end_time = message.created_at.astimezone(self.msk_tz)
                start_time = end_time - timedelta(minutes=points)
                category = self.get_category_for_event(event_name)
                all_events.append(ParsedEvent(start_time, end_time, user_id, nickname, points, event_name, category))
            except Exception as e:
                print(f"!!! –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {e}")
        return all_events

    def process_night_events(self, events):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–≤–µ–Ω—Ç–æ–≤, –¥–æ–±–∞–≤–ª—è—è –Ω–æ—á–Ω—ã–µ –±–æ–Ω—É—Å—ã."""
        with open('blum_list.json', 'r', encoding='utf-8') as f:
            blum_list = json.load(f)
        
        for event in events:
            night_start_hour, night_end_hour = 3, 7
            current_time = event.start_time
            total_night_minutes = 0
            while current_time < event.end_time:
                if night_start_hour <= current_time.hour < night_end_hour: total_night_minutes += 1
                current_time += timedelta(minutes=1)

            if total_night_minutes > 0:
                is_blum = event.user_id in blum_list
                multiplier = 2.0 if is_blum else 1.5
                bonus_points = round(total_night_minutes * (multiplier - 1.0))
                event.night_bonus = bonus_points
                event.night_multiplier_str = "(x2)" if is_blum else "(x1.5)"
        return events

    async def generate_log_file(self, events, filename="log.txt", night_log=False):
        if not events: return None
        events.sort(key=lambda x: x.start_time)
        buffer = io.StringIO()
        total_points = 0
        for event in events:
            # –î–ª—è –∏—Ç–æ–≥–∞ –≤—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞–µ–º –±–∞–ª–ª—ã + –±–æ–Ω—É—Å
            total_points += event.points + event.night_bonus
            
            start_str = event.start_time.strftime("%H:%M %d.%m")
            end_str = event.end_time.strftime("%H:%M %d.%m")
            if night_log:
                # –û—Å–Ω–æ–≤–Ω–æ–µ —á–∏—Å–ª–æ - event.points (—á–∏—Å—Ç—ã–µ –±–∞–ª–ª—ã)
                points_str = f"{event.points} | {event.night_multiplier_str} {event.night_bonus}"
                buffer.write(f"{start_str} | {end_str} | <@{event.user_id}> | {event.nickname} | {points_str} | {event.event_name} | {event.category}\n")
            else:
                buffer.write(f"{start_str} | {end_str} | <@{event.user_id}> | {event.nickname} | {event.points} | {event.event_name} | {event.category}\n")
        
        buffer.write(f"\n–ò—Ç–æ–≥: {total_points} –±–∞–ª–ª–æ–≤")
        buffer.seek(0)
        return discord.File(buffer, filename=filename)

    async def generate_summary_log_file(self, events, filename="summary.txt"):
        if not events: return None
        user_points = defaultdict(int)
        for event in events:
            # –í —Å—É–º–º–∞—Ä–Ω–æ–º –ª–æ–≥–µ —Ç–∞–∫–∂–µ —É—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å
            user_points[event.user_id] += event.points + event.night_bonus
        sorted_users = sorted(user_points.items(), key=lambda item: item[1], reverse=True)
        buffer = io.StringIO()
        total_points = sum(user_points.values())
        for i, (user_id, points) in enumerate(sorted_users):
            buffer.write(f"{i+1}. {user_id} - {points} –±–∞–ª–ª–æ–≤\n")
        buffer.write(f"\n–ò—Ç–æ–≥: {total_points} –±–∞–ª–ª–æ–≤")
        buffer.seek(0)
        return discord.File(buffer, filename=filename)

    # --- –ö–æ–º–∞–Ω–¥—ã ---
    @app_commands.command(name="logs", description="–û–±—â–∏–π –ª–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
    @app_commands.describe(dates="–î–∞—Ç–∞ –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú –∏–ª–∏ –î–î.–ú–ú-–î–î.–ú–ú")
    async def logs(self, interaction: discord.Interaction, dates: str):
        await interaction.response.defer(ephemeral=True)
        try: start_date, end_date = parse_date_range(dates)
        except ValueError: await interaction.followup.send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.", ephemeral=True); return
        events = await self.parse_channel_history(start_date, end_date)
        if not events: await interaction.followup.send("–ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–≤–µ–Ω—Ç–æ–≤.", ephemeral=True); return
        log_file = await self.generate_log_file(events, filename=f"general_log_{dates}.txt")
        log_channel = self.bot.get_channel(self.bot.log_channel_id)
        if log_channel:
            await log_channel.send(f"üìÑ –û–±—â–∏–π –ª–æ–≥ –∑–∞ {dates}", file=log_file)
            await interaction.followup.send(f"–õ–æ–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {log_channel.mention}.", ephemeral=True)

    @app_commands.command(name="log", description="–õ–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
    @app_commands.describe(category="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", dates="–î–∞—Ç–∞ –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç")
    async def category_log(self, interaction: discord.Interaction, category: str, dates: str):
        await interaction.response.defer(ephemeral=True)
        try: start_date, end_date = parse_date_range(dates)
        except ValueError: await interaction.followup.send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.", ephemeral=True); return
        all_events = await self.parse_channel_history(start_date, end_date)
        category_events = [event for event in all_events if event.category.lower() == category.lower()]
        if not category_events: await interaction.followup.send(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ `{category}` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–≤–µ–Ω—Ç–æ–≤.", ephemeral=True); return
        log_file = await self.generate_log_file(category_events, filename=f"log_{category}_{dates}.txt")
        log_channel = self.bot.get_channel(self.bot.log_channel_id)
        if log_channel:
            await log_channel.send(f"üìÑ –õ–æ–≥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ `{category}` –∑–∞ {dates}", file=log_file)
            await interaction.followup.send(f"–õ–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {log_channel.mention}.", ephemeral=True)
    
    @category_log.autocomplete('category')
    async def category_log_autocomplete(self, interaction: discord.Interaction, current: str):
        with open('categories.json', 'r', encoding='utf-8') as f: categories = json.load(f)
        return [ app_commands.Choice(name=cat, value=cat) for cat in categories if current.lower() in cat.lower() ]

    @app_commands.command(name="check", description="–õ–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    @app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏", dates="–î–∞—Ç–∞ –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç")
    async def check_user(self, interaction: discord.Interaction, user: discord.User, dates: str):
        await interaction.response.defer(ephemeral=True)
        try: start_date, end_date = parse_date_range(dates)
        except ValueError: await interaction.followup.send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.", ephemeral=True); return
        all_events = await self.parse_channel_history(start_date, end_date)
        user_events = [event for event in all_events if event.user_id == user.id]
        if not user_events: await interaction.followup.send(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–≤–µ–Ω—Ç–æ–≤ –¥–ª—è {user.mention}.", ephemeral=True); return
        log_file = await self.generate_log_file(user_events, filename=f"log_{user.name}_{dates}.txt")
        log_channel = self.bot.get_channel(self.bot.log_channel_id)
        if log_channel:
            await log_channel.send(f"üìÑ –õ–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è {user.mention} –∑–∞ {dates}", file=log_file)
            await interaction.followup.send(f"–õ–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {log_channel.mention}.", ephemeral=True)

    @app_commands.command(name="night_log", description="–õ–æ–≥ –Ω–æ—á–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –±–æ–Ω—É—Å–∞–º–∏.")
    @app_commands.describe(dates="–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú-–î–î.–ú–ú")
    async def night_log(self, interaction: discord.Interaction, dates: str):
        await interaction.response.defer(ephemeral=True)
        try: start_date, end_date = parse_date_range(dates)
        except ValueError: await interaction.followup.send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.", ephemeral=True); return
        all_events = await self.parse_channel_history(start_date, end_date)
        night_events_processed = self.process_night_events(all_events)
        night_events = [e for e in night_events_processed if e.night_bonus > 0]
        if not night_events: await interaction.followup.send("–ù–æ—á–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", ephemeral=True); return
        log_file = await self.generate_log_file(night_events, filename=f"night_log_{dates}.txt", night_log=True)
        log_channel = self.bot.get_channel(self.bot.log_channel_id)
        if log_channel:
            await log_channel.send(f"üåô –õ–æ–≥ –Ω–æ—á–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ {dates}", file=log_file)
            await interaction.followup.send(f"–õ–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {log_channel.mention}.", ephemeral=True)

    @app_commands.command(name="makser", description="–í—ã–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–º–º–∞—Ä–Ω–æ–≥–æ –ª–æ–≥–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.")
    async def makser(self, interaction: discord.Interaction):
        view = MakserView(self.bot, self)
        await interaction.response.send_message("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–∞:", view=view, ephemeral=True)

    @app_commands.command(name="clear", description="–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤).")
    @app_commands.checks.has_permissions(administrator=True)
    async def clear_channel(self, interaction: discord.Interaction):
        """–û—á–∏—â–∞–µ—Ç –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞."""
        await interaction.response.defer(ephemeral=True)
        
        # –¶–µ–ª—å - –∫–∞–Ω–∞–ª, –≥–¥–µ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
        channel_to_clear = interaction.channel

        if not channel_to_clear:
             # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–±—ã—Ç–æ—á–Ω–∞, —Ç.–∫. interaction –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç –∫–∞–Ω–∞–ª, –Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            await interaction.followup.send("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª.", ephemeral=True)
            return

        try:
            deleted_messages = await channel_to_clear.purge()
            await interaction.followup.send(f"–ö–∞–Ω–∞–ª {channel_to_clear.mention} –±—ã–ª –æ—á–∏—â–µ–Ω. –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(deleted_messages)}.", ephemeral=True)
        except discord.Forbidden:
            await interaction.followup.send(f"–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ {channel_to_clear.mention}.", ephemeral=True)
        except Exception as e:
            await interaction.followup.send(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–∞–Ω–∞–ª–∞: {e}", ephemeral=True)

    @clear_channel.error
    async def clear_channel_error(self, interaction: discord.Interaction, error: app_commands.AppCommandError):
        if isinstance(error, app_commands.MissingPermissions):
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", ephemeral=True)
        else:
            await interaction.response.send_message(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {error}", ephemeral=True)


async def setup(bot):
    await bot.add_cog(LogsCog(bot))

